buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.1.2'
    }
}
apply plugin: 'com.android.application'

repositories {
    jcenter()
}

dependencies {
    compile fileTree(dir: 'libs', include: '*.jar')
    compile 'com.android.support:support-v4:23.3.0'

    androidTestCompile 'org.mockito:mockito-core:1.+'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker:1.4+'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-dx:1.4+'
    androidTestCompile 'com.crittercism.dexmaker:dexmaker-mockito:1.4+'
    androidTestCompile fileTree(dir: 'tests/libs', include: '*.jar')
}

def allSrcDirs = ['submodules/linphone/mediastreamer2/java/src',
                  'submodules/linphone/java/j2se',
                  'submodules/linphone/java/common',
                  'submodules/linphone/java/impl',
                  'submodules/linphone/coreapi/help/java',
                  'src',
                  'tbm/src/main/java']

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.3"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = allSrcDirs
            resources.srcDirs = allSrcDirs
            aidl.srcDirs = allSrcDirs
            renderscript.srcDirs = allSrcDirs
            res.srcDirs = ['res', 'tbm/src/main/res']
            assets.srcDirs = ['assets']
            jniLibs.srcDir 'libs'

            java.exclude '**/mediastream/MediastreamerActivity.java'
        }

        // Move the tests to tests/java, tests/res, etc...
        androidTest.setRoot('tests')
        androidTest {
            manifest.srcFile 'tests/AndroidManifest.xml'
            java.srcDirs = ['tests/src', 'tbm/src/androidTest/java']
            res.srcDirs = ['tests/res', 'tbm/src/androidTest/res']
        }

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }

    def gitDescribe = 'git describe --always'.execute().text.trim()

    defaultConfig {
        versionName ""
    }

    buildTypes {
        debug {
            versionNameSuffix gitDescribe
        }

        release {
            lintOptions {
                disable 'MissingTranslation'
            }
        }
    }

    if (project.hasProperty("RELEASE_VERSION_NAME")) {
        buildTypes {
            release {
                versionNameSuffix RELEASE_VERSION_NAME
            }
        }
    }

    if (project.hasProperty("RELEASE_STORE_FILE")) {
        signingConfigs {
            release {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
        buildTypes {
            release {
                signingConfig signingConfigs.release
            }
        }
    }

    task generateDebugJniHeaders { }

    task generateReleaseJniHeaders { }

    def coreJniClasses = [
        'org.linphone.core.LinphoneAddressImpl',
        'org.linphone.core.LinphoneAuthInfoImpl',
        'org.linphone.core.LinphoneCallImpl',
        'org.linphone.core.LinphoneCallLogImpl',
        'org.linphone.core.LinphoneCallParamsImpl',
        'org.linphone.core.LinphoneCallStatsImpl',
        'org.linphone.core.LinphoneChatMessageImpl',
        'org.linphone.core.LinphoneChatRoomImpl',
        'org.linphone.core.LinphoneCoreFactoryImpl',
        'org.linphone.core.LinphoneCoreImpl',
        'org.linphone.core.LinphoneFriendImpl',
        'org.linphone.core.LinphoneProxyConfigImpl',
        'org.linphone.core.PayloadTypeImpl',
        'org.linphone.core.LpConfigImpl',
        'org.linphone.core.LinphoneInfoMessageImpl',
        'org.linphone.core.LinphoneEventImpl',
        'org.linphone.core.PresenceActivityImpl',
        'org.linphone.core.PresenceModelImpl',
        'org.linphone.core.PresenceNoteImpl',
        'org.linphone.core.PresencePersonImpl',
        'org.linphone.core.PresenceServiceImpl',
        'org.linphone.core.ErrorInfoImpl',
    ]

    task generateDebugCoreJniHeaders(type: JavahTask) {
        variant = 'debug'
        outputFile = file('gen/linphonecore_jni.h')
        args coreJniClasses
    }
    generateDebugJniHeaders.dependsOn generateDebugCoreJniHeaders

    task generateReleaseCoreJniHeaders(type: JavahTask) {
        variant = 'release'
        outputFile = file('gen/linphonecore_jni.h')
        args coreJniClasses
    }
    generateReleaseJniHeaders.dependsOn generateReleaseCoreJniHeaders

    task generateDebugXml2LpcJniHeaders(type: JavahTask) {
        variant = 'debug'
        outputFile = file('gen/xml2lpc_jni.h')
        args 'org.linphone.tools.Xml2Lpc'
    }
    generateDebugJniHeaders.dependsOn generateDebugXml2LpcJniHeaders

    task generateReleaseXml2LpcJniHeaders(type: JavahTask) {
        variant = 'release'
        outputFile = file('gen/xml2lpc_jni.h')
        args 'org.linphone.tools.Xml2Lpc'
    }
    generateReleaseJniHeaders.dependsOn generateReleaseXml2LpcJniHeaders

    task generateDebugLpc2XmlJniHeaders(type: JavahTask) {
        variant = 'debug'
        outputFile = file('gen/lpc2xml_jni.h')
        args 'org.linphone.tools.Lpc2Xml'
    }
    generateDebugJniHeaders.dependsOn generateDebugLpc2XmlJniHeaders

    task generateReleaseLpc2XmlJniHeaders(type: JavahTask) {
        variant = 'release'
        outputFile = file('gen/lpc2xml_jni.h')
        args 'org.linphone.tools.Lpc2Xml'
    }
    generateReleaseJniHeaders.dependsOn generateReleaseLpc2XmlJniHeaders
}

class JavahTask extends Exec {
    def setVariant(String variant) {
        def compileTaskName = "compile${variant.capitalize()}JavaWithJavac"
        executable 'javah'
        args '-classpath', "${->project[compileTaskName].destinationDir}"
        dependsOn compileTaskName
    }

    def setOutputFile(File outputFile) {
        args '-o', outputFile
    }
}
